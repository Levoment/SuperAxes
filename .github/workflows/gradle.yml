# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - release/*

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v2

      # Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      # Set up gradle execute permissions
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build the project with gradle
      - name: Build with Gradle
        run: ./gradlew build

      # Extract the mod version
      - name : Set mod version
        id: set-mod-version
        run: echo "::set-output name=MOD_VERSION::$(grep 'mod_version' ./gradle.properties | grep -P -o '(\d+.\d+.\d+)')"
      # Extract the mod version
      - name: Set mod archive base name
        id: set-mod-archive-base-name
        run: echo "::set-output name=ARCHIVE_BASENAME::$(grep 'archives_base_name' ./gradle.properties | grep -P -o '(?<=\=).*' | sed -e 's/^[ \t]*//')"

      # Create a release. Use the output from steps: set-mod-archive-base-name and set-mod-version for the name of the release
      - name : Create release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.set-mod-archive-base-name.outputs.ARCHIVE_BASENAME }} ${{ steps.set-mod-version.outputs.MOD_VERSION }}
          draft: false
          prerelease: false

      # Upload the compiled binary to the release page. Use the output from steps: set-mod-archive-base-name and set-mod-version for the name of uploaded binary
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        id: upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./build/libs/${{ steps.set-mod-archive-base-name.outputs.ARCHIVE_BASENAME }}-${{ steps.set-mod-version.outputs.MOD_VERSION }}.jar
          asset_name: ${{ steps.set-mod-archive-base-name.outputs.ARCHIVE_BASENAME }}-${{ steps.set-mod-version.outputs.MOD_VERSION }}.jar
          asset_content_type: application/jar